group 'com.github.lavenderx'
version '0.1.0'

buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "org.flywaydb:flyway-gradle-plugin:$flywayPluginVersion"
        classpath "us.kirchmeier:gradle-capsule-plugin:$capsulePluginVersion"
    }
}

apply plugin: 'org.flywaydb.flyway'
apply plugin: 'us.kirchmeier.capsule'

configurations {
    provided

    // Use logback-slf4j instead of the Spring's commons-logging
    all*.exclude group: 'commons-logging', module: 'commons-logging'

    mybatisGenerator
}

sourceSets {
    main {
        compileClasspath += configurations.provided
        runtimeClasspath += configurations.provided
    }
    test {
        compileClasspath += configurations.provided
        runtimeClasspath += configurations.provided
    }
}

ext {

    def props = new Properties()
    file("src/main/resources/jdbc-mysql.properties").withInputStream {
        props.load(it)
    }
    props.each {
        project.extensions.add("$it.key", it.value)
    }
}

flyway {
    url = project['jdbc.url']
    user = project['jdbc.username']
    password = project['jdbc.password']
    locations = ["filesystem:db/migration"]
}

dependencies {
    provided "javax.servlet:javax.servlet-api:3.1.0"

    mybatisGenerator "mysql:mysql-connector-java:$mysqlDriverVersion"
    mybatisGenerator "org.mybatis.generator:mybatis-generator-core:$mybatisGeneratorVersion"
    mybatisGenerator "tk.mybatis:mapper:$mybatisMapperVersion"
}

import us.kirchmeier.capsule.task.FatCapsule

task fatCapsule(type: FatCapsule) {
    applicationClass 'org.dandelion.boot.WebAppBoot'

    baseName = rootProject.name

    capsuleManifest {
        args = ['--very-fancy']
        applicationName = project.name
        applicationId = UUID.randomUUID().toString().replaceAll("-", "")
        applicationVersion = version.toString().replaceAll("-(?i)SNAPSHOT", "")
        minJavaVersion = '1.8'
        javaVersion = '1.8'
        jdkRequired = true
    }
}

task mybatisGenerate << {
    ant.properties['targetProject'] = projectDir.path
    ant.properties['driverClass'] = project['jdbc.driverClassName']
    ant.properties['connectionURL'] = project['jdbc.url']
    ant.properties['userId'] = project['jdbc.user']
    ant.properties['password'] = project['jdbc.pass']
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
    ant.properties['modelPackage'] = this.modelPackage
    ant.properties['mapperPackage'] = this.mapperPackage
    ant.properties['sqlMapperPackage'] = this.sqlMapperPackage

    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(overwrite: true, configfile: 'db/generatorConfig.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'userId')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')
        }
    }
}